{"version":3,"sources":["actions.js","reducers.js","configureStore.js","components/Picker.js","components/Posts.js","containers/AsyncApp.js","containers/Root.js","index.js"],"names":["REQUEST_POSTS","RECEIVE_POSTS","SELECT_SUBREDDIT","INVALIDATE_SUBREDDIT","fetchPosts","subreddit","dispatch","type","requestPosts","fetch","concat","then","response","json","posts","data","children","map","child","receivedAt","Date","now","receivePosts","fetchPostsIfNeeded","getState","state","postsBySubreddit","isFetching","didInvalidate","shouldFetchPosts","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","defineProperty","items","lastUpdated","selectedSubreddit","loggerMiddleware","createLogger","Picker","_this$props","this","props","value","onChange","options","react_default","a","createElement","Select_default","e","target","option","MenuItem_default","key","Component","Posts","expanded","handleExpandClick","_this","setState","_this2","classes","post","i","Card_default","className","card","CardHeader_default","avatar","Avatar_default","aria-label","IconButton_default","MoreVert_default","title","subheader","author_fullname","CardMedia_default","media","image","url","CardContent_default","CardActions_default","actions","disableActionSpacing","ThumbUp_default","ups","ThumbDown_default","downs","onClick","aria-expanded","InsertComment_default","num_comments","Share_default","Collapse_default","in","timeout","unmountOnExit","Typography_default","paragraph","withStyles","theme","maxWidth","marginLeft","marginRight","marginTop","marginBottom","height","paddingTop","display","expand","transform","transition","transitions","create","duration","shortest","expandOpen","backgroundColor","red","AsyncApp","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleRefreshClick","prevProps","_this$props2","nextSubreddit","preventDefault","_this$props3","_this$props4","Picker_Picker","Button_default","Refresh_default","toLocaleTimeString","style","opacity","components_Posts","connect","preloadedState","_ref","store","createStore","applyMiddleware","thunkMiddleware","Root","es","containers_AsyncApp","render","Root_Root","document","getElementById"],"mappings":"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","file":"static/js/main.95d3e516.chunk.js","sourcesContent":["import fetch from 'cross-fetch'\n\nexport const REQUEST_POSTS = 'REQUEST_POSTS'\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT'\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT'\n\nexport function selectSubreddit(subreddit) {\n  return {\n    type: SELECT_SUBREDDIT,\n    subreddit\n  }\n}\n\nexport function invalidateSubreddit(subreddit) {\n  return {\n    type: INVALIDATE_SUBREDDIT,\n    subreddit\n  }\n}\n\nfunction requestPosts(subreddit) {\n  return {\n    type: REQUEST_POSTS,\n    subreddit\n  }\n}\n\nfunction receivePosts(subreddit, json) {\n  return {\n    type: RECEIVE_POSTS,\n    subreddit,\n    posts: json.data.children.map(child => child.data),\n    receivedAt: Date.now()\n  }\n}\n\nfunction fetchPosts(subreddit) {\n  return dispatch => {\n    dispatch(requestPosts(subreddit))\n    return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n      .then(response => response.json())\n      .then(json => dispatch(receivePosts(subreddit, json)))\n  }\n}\n\nfunction shouldFetchPosts(state, subreddit) {\n  const posts = state.postsBySubreddit[subreddit]\n  if (!posts) {\n    return true\n  } else if (posts.isFetching) {\n    return false\n  } else {\n    return posts.didInvalidate\n  }\n}\n\nexport function fetchPostsIfNeeded(subreddit) {\n  return (dispatch, getState) => {\n    if (shouldFetchPosts(getState(), subreddit)) {\n      return dispatch(fetchPosts(subreddit))\n    }\n  }\n}\n\n","import { combineReducers } from 'redux'\nimport {\n  SELECT_SUBREDDIT,\n  INVALIDATE_SUBREDDIT,\n  REQUEST_POSTS,\n  RECEIVE_POSTS\n} from './actions'\n\nfunction selectedSubreddit(state = 'alternativeart', action) {\n  switch (action.type) {\n    case SELECT_SUBREDDIT:\n      return action.subreddit\n    default:\n      return state\n  }\n}\n\nfunction posts(\n  state = {\n    isFetching: false,\n    didInvalidate: false,\n    items: []\n  },\n  action\n) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n      return Object.assign({}, state, {\n        didInvalidate: true\n      })\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        isFetching: true,\n        didInvalidate: false\n      })\n    case RECEIVE_POSTS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        didInvalidate: false,\n        items: action.posts,\n        lastUpdated: action.receivedAt\n      })\n    default:\n      return state\n  }\n}\n\nfunction postsBySubreddit(state = {}, action) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n    case RECEIVE_POSTS:\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        [action.subreddit]: posts(state[action.subreddit], action)\n      })\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  postsBySubreddit,\n  selectedSubreddit\n})\n\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from './reducers'\n\nconst loggerMiddleware = createLogger()\n\nexport default function configureStore(preloadedState) {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware, loggerMiddleware)\n  )\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\n\nexport default class Picker extends Component {\n  render() {\n    const { value, onChange, options } = this.props\n    return (\n      <span>\n        {/* <h1>You have selected {value}</h1> */}\n        <Select onChange={e => onChange(e.target.value)} value={value}>\n          {options.map(option => (\n            <MenuItem value={option} key={option}>\n              {option}\n            </MenuItem>\n          ))}\n        </Select>\n      </span>\n    )\n  }\n}\n\nPicker.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n}\n\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\n// import classnames from 'classnames'\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardActions from '@material-ui/core/CardActions'\nimport Collapse from '@material-ui/core/Collapse'\nimport Avatar from '@material-ui/core/Avatar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport red from '@material-ui/core/colors/red'\n// import FavoriteIcon from '@material-ui/icons/Favorite'\nimport Comments from '@material-ui/icons/InsertComment'\nimport ThumbUp from '@material-ui/icons/ThumbUp'\nimport ThumbDown from '@material-ui/icons/ThumbDown'\nimport ShareIcon from '@material-ui/icons/Share'\n// import ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\n\n\nconst styles = theme => ({\n    card: {\n      maxWidth: 1500,\n      marginLeft:'20%',\n      marginRight:'20%',\n      marginTop:20,\n      marginBottom:20,\n      // float: 'Left'\n    },\n    media: {\n      height: 0,\n      paddingTop: '70.25%', // 16:9\n    },\n    actions: {\n      display: 'flex',\n    },\n    expand: {\n      transform: 'rotate(0deg)',\n      marginLeft: 'auto',\n      transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest,\n      }),\n    },\n    expandOpen: {\n      transform: 'rotate(180deg)',\n    },\n    avatar: {\n      backgroundColor: red[500],\n    },\n  });\n\nclass Posts extends Component {\n    state = { expanded: false };\n\n    handleExpandClick = () => {\n      this.setState(state => ({ expanded: !state.expanded }));\n    };\n    \n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n      {this.props.posts.map((post, i) => (\n        <Card className={classes.card}>\n        <CardHeader\n          avatar={\n            <Avatar aria-label=\"Recipe\" className={classes.avatar}>\n              R\n            </Avatar>\n          }\n          action={\n            <IconButton>\n              <MoreVertIcon />\n            </IconButton>\n          }\n          title={post.title}\n          subheader={post.author_fullname}\n        />\n        <CardMedia\n          className={classes.media}\n          image={post.url}\n          title={post.title}\n        />\n        <CardContent>\n          \n        </CardContent>\n        <CardActions className={classes.actions} disableActionSpacing>\n          {/* <IconButton aria-label=\"Add to favorites\">\n          { post.likes === null ? <FavoriteIcon /> : <FavoriteIcon color=\"error\" /> }\n          </IconButton> */}\n          <IconButton>\n            <ThumbUp />{post.ups}\n          </IconButton>\n          <IconButton>\n            <ThumbDown />{post.downs}\n          </IconButton>\n          <IconButton\n            // className={classnames(classes.expand, {\n            //   [classes.expandOpen]: this.state.expanded,\n            // })}\n            onClick={this.handleExpandClick}\n            aria-expanded={this.state.expanded}\n            aria-label=\"Show more\"\n          >\n            <Comments/>{post.num_comments}\n          </IconButton>\n          <IconButton aria-label=\"Share\">\n            <ShareIcon />\n          </IconButton>\n        </CardActions>\n        <Collapse in={this.state.expanded} timeout=\"auto\" unmountOnExit>\n          <CardContent>\n            <Typography paragraph>Comments:</Typography>    \n          </CardContent>\n        </Collapse>\n      </Card>\n      ))}\n      </div>\n    )\n  }\n}\n\nPosts.propTypes = {\n  posts: PropTypes.array.isRequired,\n  classes: PropTypes.object.isRequired\n}\n\nexport default withStyles(styles)(Posts);","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {\n  selectSubreddit,\n  fetchPostsIfNeeded,\n  invalidateSubreddit\n} from '../actions'\nimport Picker from '../components/Picker'\nimport Posts from '../components/Posts'\nimport Refresh from '@material-ui/icons/Refresh'\nimport Button from '@material-ui/core/Button';\n\nclass AsyncApp extends Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleRefreshClick = this.handleRefreshClick.bind(this)\n  }\n\n  componentDidMount() {\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedSubreddit !== prevProps.selectedSubreddit) {\n      const { dispatch, selectedSubreddit } = this.props\n      dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n  }\n\n  handleChange(nextSubreddit) {\n    this.props.dispatch(selectSubreddit(nextSubreddit))\n    this.props.dispatch(fetchPostsIfNeeded(nextSubreddit))\n  }\n\n  handleRefreshClick(e) {\n    e.preventDefault()\n\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(invalidateSubreddit(selectedSubreddit))\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  render() {\n    const { selectedSubreddit, posts, isFetching, lastUpdated } = this.props\n    return (\n      <div>\n        &nbsp;&nbsp;&nbsp;&nbsp;<Picker\n          value={selectedSubreddit}\n          onChange={this.handleChange}\n          options={['alternativeart', 'pics', 'gifs', 'adviceanimals', 'cats', 'images', 'photoshopbattles', 'hmmm', 'all', 'aww']}\n        />\n        <p>\n          {!isFetching && (\n            <Button onClick={this.handleRefreshClick}><Refresh /></Button>\n          )}\n          {lastUpdated && (\n            <span>\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.{' '}\n            </span>\n          )}\n        </p>\n        {isFetching && posts.length === 0 && <h2>Loading...</h2>}\n        {!isFetching && posts.length === 0 && <h2>Empty.</h2>}\n        {posts.length > 0 && (\n          <div style={{ opacity: isFetching ? 0.5 : 1 }}>\n            <Posts posts={posts} />\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nAsyncApp.propTypes = {\n  selectedSubreddit: PropTypes.string.isRequired,\n  posts: PropTypes.array.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number,\n  dispatch: PropTypes.func.isRequired\n}\n\nfunction mapStateToProps(state) {\n  const { selectedSubreddit, postsBySubreddit } = state\n  const { isFetching, lastUpdated, items: posts } = postsBySubreddit[\n    selectedSubreddit\n  ] || {\n    isFetching: true,\n    items: []\n  }\n\n  return {\n    selectedSubreddit,\n    posts,\n    isFetching,\n    lastUpdated\n  }\n}\n\nexport default connect(mapStateToProps)(AsyncApp)","import React, { Component } from 'react'\nimport { Provider } from 'react-redux'\nimport configureStore from '../configureStore'\nimport AsyncApp from './AsyncApp'\n\nconst store = configureStore()\n\nexport default class Root extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <AsyncApp />\n      </Provider>\n    )\n  }\n}","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n// import { BrowserRouter as Router, Route } from 'react-router-dom'\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport 'babel-polyfill'\n\nimport React from 'react'\nimport { render } from 'react-dom'\nimport Root from './containers/Root'\n\nrender(<Root />, document.getElementById('root'))\n"],"sourceRoot":""}